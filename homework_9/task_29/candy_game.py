# —Å–¥–µ–ª–∞—Ç—å –±–æ—Ç–∞ –¥–ª—è –∏–≥—Ä—ã —Å –∫–æ–Ω—Ñ–µ—Ç–∞–º–∏ –º–µ–∂–¥—É —á–µ–ª–æ–≤–µ–∫–æ–º –∏ —Ç–µ–ª–µ–≥—Ä–∞–º–º –±–æ—Ç–æ–º

import random
import telebot

from homework_9.task_29.bot_turn_service import bot_take_turn
from homework_9.task_29.controller import run_game
from homework_9.task_29.game_state_service import check_if_game_is_finished

token: str = "YOUR_TOKEN"

bot = telebot.TeleBot(token)

you: str = "'üòÄ –∏–≥—Ä–æ–∫'"
smart_bot: str = "'ü§ñ –±–æ—Ç'"
inital_num_of_sweets: int = 221

game_data = {"turn": 0,
             "current_user": "",
             "amount_of_sweets": 0,
             "bot_sweets": 0,
             "game_finished": False,
             "winner": ""}

@bot.message_handler(commands = ["start"])
def start(message):
    bot.send_message(message.chat.id, "----- –ù–∞—á–∞—Ç—å –∏–≥—Ä—É '–ö–æ–Ω—Ñ–µ—Ç—ã' -----")
    bot.send_message(message.chat.id, f"–ù–∞ —Å—Ç–æ–ª–µ –ª–µ–∂–∏—Ç {inital_num_of_sweets} –∫–æ–Ω—Ñ–µ—Ç. " 
                                      f"–ò–≥—Ä–∞—é—Ç –±–æ—Ç –∏ –∏–≥—Ä–æ–∫, –¥–µ–ª–∞—è —Ö–æ–¥ –¥—Ä—É–≥ –ø–æ—Å–ª–µ –¥—Ä—É–≥–∞. "
                                      f"–ü–µ—Ä–≤—ã–π —Ö–æ–¥ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è –∂–µ—Ä–µ–±—å—ë–≤–∫–æ–π. "
                                      f"–ó–∞ –æ–¥–∏–Ω —Ö–æ–¥ –º–æ–∂–Ω–æ –∑–∞–±—Ä–∞—Ç—å –Ω–µ –±–æ–ª–µ–µ —á–µ–º 28 –∫–æ–Ω—Ñ–µ—Ç. "
                                      f"–í—Å–µ –∫–æ–Ω—Ñ–µ—Ç—ã –æ–ø–ø–æ–Ω–µ–Ω—Ç–∞ –¥–æ—Å—Ç–∞—é—Ç—Å—è —Å–¥–µ–ª–∞–≤—à–µ–º—É –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ö–æ–¥. ")
    bot.send_message(message.chat.id, "/whoisfirst —á—Ç–æ–±—ã –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∫—Ç–æ —Ö–æ–¥–∏—Ç –ø–µ—Ä–≤—ã–π - –í—ã –∏–ª–∏ –±–æ—Ç.")

@bot.message_handler(commands= ["whoisfirst"])
def button(message):
    rand_num = (random.randint(0, 1))
    if rand_num == 0:
        game_data["current_user"] = you
    else:
        game_data["current_user"] = smart_bot
    run_game(bot, inital_num_of_sweets, game_data, message, you, bot)

@bot.message_handler(content_types=["text"], )
def user_turn(message):
    if int(message.text) > game_data["amount_of_sweets"]:
        bot.send_message(message.chat.id, f"–ù–µ–ª—å–∑—è –≤–∑—è—Ç—å –±–æ–ª—å—à–µ –∫–æ–Ω—Ñ–µ—Ç {message.text}, —á–µ–º –æ—Å—Ç–∞–ª–æ—Å—å {game_data['amount_of_sweets']}")
        bot.send_message(message.chat.id, f"–í–æ–∑—å–º–∏—Ç–µ {game_data['amount_of_sweets']} –∏ –í—ã –≤—ã–∏–≥—Ä–∞–π—Ç–µ —ç—Ç—É –∏–≥—Ä—É!")
    elif int(message.text) < 1 or int(message.text) > 28:
        bot.send_message(message.chat.id, f"–ù–µ–≤–µ—Ä–Ω–æ–µ –∫–æ–ª-–≤–æ –∫–æ–Ω—Ñ–µ—Ç {message.text} - –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 1 –¥–æ 28")
    else:

        bot.send_message(message.chat.id,
                         f"{game_data['current_user']} –∑–∞–±—Ä–∞–ª {message.text} –∫–æ–Ω—Ñ–µ—Ç -> –æ—Å—Ç–∞–ª–æ—Å—å –∫–æ–Ω—Ñ–µ—Ç: {int(game_data['amount_of_sweets']) - int(message.text)}")
        game_data['amount_of_sweets'] = int(game_data['amount_of_sweets']) - int(message.text)
        game_data['current_user'] = smart_bot
        game_data['turn'] = int(game_data['turn']) + 1
        check_if_game_is_finished(bot, message, game_data, you, smart_bot)
        bot_take_turn(bot, message, game_data, you, smart_bot)

bot.infinity_polling()